{
    "sourceFile": "app/(SnippetDetail)/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1728123057582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728123066065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     // Récupérer le snippet correspondant à l'ID\n     fetch(`/data/snippets.json`)\n       .then((response) => response.json())\n       .then((data) => {\n-        const selectedSnippet = data.find((snippet) => snippet.id === parseInt(id));\n+        const selectedSnippet = data.find((snippets) => snippets.id === parseInt(id));\n         setSnippet(selectedSnippet);\n       });\n   }, [id]);\n \n"
                },
                {
                    "date": 1728123083704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   if (!snippet) return <div>Chargement...</div>;\n \n   return (\n     <div className=\"max-w-screen-md mx-auto p-4\">\n-      <h1 className=\"text-2xl font-bold\">{snippet.titre}</h1>\n+      <h1 className=\"text-2xl font-bold\">{snippets.titre}</h1>\n       <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n       <p className=\"my-4\">{snippet.description}</p>\n \n       {/* Afficher le code JS */}\n"
                },
                {
                    "date": 1728123102610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   return (\n     <div className=\"max-w-screen-md mx-auto p-4\">\n       <h1 className=\"text-2xl font-bold\">{snippets.titre}</h1>\n       <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n-      <p className=\"my-4\">{snippet.description}</p>\n+      <p className=\"my-4\">{snippet.descriptions}</p>\n \n       {/* Afficher le code JS */}\n       <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n \n"
                },
                {
                    "date": 1728123116244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   return (\n     <div className=\"max-w-screen-md mx-auto p-4\">\n       <h1 className=\"text-2xl font-bold\">{snippets.titre}</h1>\n       <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n-      <p className=\"my-4\">{snippet.descriptions}</p>\n+      <p className=\"my-4\">{snippet.description}</p>\n \n       {/* Afficher le code JS */}\n       <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n \n"
                },
                {
                    "date": 1728124324544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n-import { useParams } from 'react-router-dom';\n+import { useRouter } from 'next/router';\n import { useState, useEffect } from 'react';\n \n+\n export default function SnippetDetail() {\n   const { id } = useParams(); // Récupérer l'ID du snippet depuis l'URL\n   const [snippet, setSnippet] = useState(null);\n \n"
                },
                {
                    "date": 1728124368036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,37 +2,40 @@\n import { useState, useEffect } from 'react';\n \n \n export default function SnippetDetail() {\n-  const { id } = useParams(); // Récupérer l'ID du snippet depuis l'URL\n-  const [snippet, setSnippet] = useState(null);\n-\n-  useEffect(() => {\n-    // Récupérer le snippet correspondant à l'ID\n-    fetch(`/data/snippets.json`)\n-      .then((response) => response.json())\n-      .then((data) => {\n-        const selectedSnippet = data.find((snippets) => snippets.id === parseInt(id));\n-        setSnippet(selectedSnippet);\n-      });\n-  }, [id]);\n-\n-  if (!snippet) return <div>Chargement...</div>;\n-\n-  return (\n-    <div className=\"max-w-screen-md mx-auto p-4\">\n-      <h1 className=\"text-2xl font-bold\">{snippets.titre}</h1>\n-      <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n-      <p className=\"my-4\">{snippet.description}</p>\n-\n-      {/* Afficher le code JS */}\n-      <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n-\n-      {/* Ajouter un exemple de résultat */}\n-      <h2 className=\"text-xl font-semibold mt-6\">Exemple de résultat :</h2>\n-      <div className=\"bg-gray-100 p-4 rounded-md\">\n-        {/* Utilisation de dangerouslySetInnerHTML pour insérer du code JS (ex: pour des résultats dynamiques) */}\n-        <div dangerouslySetInnerHTML={{ __html: snippet.resultat }} />\n+    const router = useRouter();\n+    const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n+    const [snippet, setSnippet] = useState(null);\n+  \n+    useEffect(() => {\n+      if (id) {\n+        // Récupérer le snippet correspondant à l'ID\n+        fetch(`/data/snippets.json`)\n+          .then((response) => response.json())\n+          .then((data) => {\n+            const selectedSnippet = data.find((snippet) => snippet.id === parseInt(id));\n+            setSnippet(selectedSnippet);\n+          });\n+      }\n+    }, [id]);\n+  \n+    if (!snippet) return <div>Chargement...</div>;\n+  \n+    return (\n+      <div className=\"max-w-screen-md mx-auto p-4\">\n+        <h1 className=\"text-2xl font-bold\">{snippet.titre}</h1>\n+        <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n+        <p className=\"my-4\">{snippet.description}</p>\n+  \n+        {/* Afficher le code JS */}\n+        <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n+  \n+        {/* Ajouter un exemple de résultat */}\n+        <h2 className=\"text-xl font-semibold mt-6\">Exemple de résultat :</h2>\n+        <div className=\"bg-gray-100 p-4 rounded-md\">\n+          <div dangerouslySetInnerHTML={{ __html: snippet.resultat }} />\n+        </div>\n       </div>\n-    </div>\n-  );\n-}\n+    );\n+  }\n+  \n"
                },
                {
                    "date": 1728124419142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,17 @@\n     const router = useRouter();\n     const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n     const [snippet, setSnippet] = useState(null);\n   \n+    type Snippet = {\n+        id: number;\n+        titre: string;\n+        categorie: string;\n+        description: string;\n+        code: string;\n+        resultat: string;\n+      };\n+      \n     useEffect(() => {\n       if (id) {\n         // Récupérer le snippet correspondant à l'ID\n         fetch(`/data/snippets.json`)\n"
                },
                {
                    "date": 1728124438106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n \n export default function SnippetDetail() {\n     const router = useRouter();\n     const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n-    const [snippet, setSnippet] = useState(null);\n+    const [snippet, setSnippet] = useState<Snippet | null>(null);\n+\n   \n     type Snippet = {\n         id: number;\n         titre: string;\n"
                },
                {
                    "date": 1728124463190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,9 @@\n     const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n     const [snippet, setSnippet] = useState<Snippet | null>(null);\n \n   \n-    type Snippet = {\n-        id: number;\n-        titre: string;\n-        categorie: string;\n-        description: string;\n-        code: string;\n-        resultat: string;\n-      };\n+  \n       \n     useEffect(() => {\n       if (id) {\n         // Récupérer le snippet correspondant à l'ID\n"
                },
                {
                    "date": 1728124469108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,16 @@\n import { useRouter } from 'next/router';\n import { useState, useEffect } from 'react';\n \n-\n+type Snippet = {\n+    id: number;\n+    titre: string;\n+    categorie: string;\n+    description: string;\n+    code: string;\n+    resultat: string;\n+  };\n+  \n export default function SnippetDetail() {\n     const router = useRouter();\n     const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n     const [snippet, setSnippet] = useState<Snippet | null>(null);\n"
                },
                {
                    "date": 1728124488427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,49 @@\n import { useRouter } from 'next/router';\n import { useState, useEffect } from 'react';\n \n+// Définition du type des données de snippet\n type Snippet = {\n-    id: number;\n-    titre: string;\n-    categorie: string;\n-    description: string;\n-    code: string;\n-    resultat: string;\n-  };\n-  \n+  id: number;\n+  titre: string;\n+  categorie: string;\n+  description: string;\n+  code: string;\n+  resultat: string;\n+};\n+\n export default function SnippetDetail() {\n-    const router = useRouter();\n-    const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n-    const [snippet, setSnippet] = useState<Snippet | null>(null);\n+  const router = useRouter();\n+  const { id } = router.query; // Récupérer l'ID du snippet depuis l'URL\n+  const [snippet, setSnippet] = useState<Snippet | null>(null);\n \n-  \n-  \n-      \n-    useEffect(() => {\n-      if (id) {\n-        // Récupérer le snippet correspondant à l'ID\n-        fetch(`/data/snippets.json`)\n-          .then((response) => response.json())\n-          .then((data) => {\n-            const selectedSnippet = data.find((snippet) => snippet.id === parseInt(id));\n-            setSnippet(selectedSnippet);\n-          });\n-      }\n-    }, [id]);\n-  \n-    if (!snippet) return <div>Chargement...</div>;\n-  \n-    return (\n-      <div className=\"max-w-screen-md mx-auto p-4\">\n-        <h1 className=\"text-2xl font-bold\">{snippet.titre}</h1>\n-        <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n-        <p className=\"my-4\">{snippet.description}</p>\n-  \n-        {/* Afficher le code JS */}\n-        <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n-  \n-        {/* Ajouter un exemple de résultat */}\n-        <h2 className=\"text-xl font-semibold mt-6\">Exemple de résultat :</h2>\n-        <div className=\"bg-gray-100 p-4 rounded-md\">\n-          <div dangerouslySetInnerHTML={{ __html: snippet.resultat }} />\n-        </div>\n+  useEffect(() => {\n+    if (id) {\n+      // Récupérer le snippet correspondant à l'ID\n+      fetch(`/data/snippets.json`)\n+        .then((response) => response.json())\n+        .then((data) => {\n+          const selectedSnippet = data.find((snippet: Snippet) => snippet.id === parseInt(id as string));\n+          setSnippet(selectedSnippet);\n+        });\n+    }\n+  }, [id]);\n+\n+  if (!snippet) return <div>Chargement...</div>;\n+\n+  return (\n+    <div className=\"max-w-screen-md mx-auto p-4\">\n+      <h1 className=\"text-2xl font-bold\">{snippet.titre}</h1>\n+      <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n+      <p className=\"my-4\">{snippet.description}</p>\n+\n+      {/* Afficher le code JS */}\n+      <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n+\n+      {/* Ajouter un exemple de résultat */}\n+      <h2 className=\"text-xl font-semibold mt-6\">Exemple de résultat :</h2>\n+      <div className=\"bg-gray-100 p-4 rounded-md\">\n+        <div dangerouslySetInnerHTML={{ __html: snippet.resultat }} />\n       </div>\n-    );\n-  }\n-  \n+    </div>\n+  );\n+}\n"
                }
            ],
            "date": 1728123057582,
            "name": "Commit-0",
            "content": "import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nexport default function SnippetDetail() {\n  const { id } = useParams(); // Récupérer l'ID du snippet depuis l'URL\n  const [snippet, setSnippet] = useState(null);\n\n  useEffect(() => {\n    // Récupérer le snippet correspondant à l'ID\n    fetch(`/data/snippets.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        const selectedSnippet = data.find((snippet) => snippet.id === parseInt(id));\n        setSnippet(selectedSnippet);\n      });\n  }, [id]);\n\n  if (!snippet) return <div>Chargement...</div>;\n\n  return (\n    <div className=\"max-w-screen-md mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold\">{snippet.titre}</h1>\n      <p className=\"text-sm text-gray-600\">{snippet.categorie}</p>\n      <p className=\"my-4\">{snippet.description}</p>\n\n      {/* Afficher le code JS */}\n      <pre className=\"bg-gray-100 p-4 rounded-md\">{snippet.code}</pre>\n\n      {/* Ajouter un exemple de résultat */}\n      <h2 className=\"text-xl font-semibold mt-6\">Exemple de résultat :</h2>\n      <div className=\"bg-gray-100 p-4 rounded-md\">\n        {/* Utilisation de dangerouslySetInnerHTML pour insérer du code JS (ex: pour des résultats dynamiques) */}\n        <div dangerouslySetInnerHTML={{ __html: snippet.resultat }} />\n      </div>\n    </div>\n  );\n}\n"
        }
    ]
}